name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Linux system dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev scrot xvfb xsel
        
    - name: Install macOS system dependencies
      if: runner.os == 'macOS'
      run: |
        brew install python-tk
        brew install xsel
    
    - name: Install Windows system dependencies
      if: runner.os == 'Windows'
      run: |
        python -m pip install pywin32
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
    
    - name: Check code formatting with Black
      if: runner.os == 'ubuntu-latest'
      run: black --check .
    
    - name: Lint with flake8
      if: runner.os == 'ubuntu-latest'
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # check against our configuration
        flake8 . --count --max-line-length=88 --extend-ignore=E203 --statistics
    
    - name: Check dependencies for known security vulnerabilities
      if: runner.os == 'ubuntu-latest'
      run: safety check -i 51457 --full-report
    
    - name: Run tests on Linux
      if: runner.os == 'Linux'
      env:
        DISPLAY: :99
        PYTHONPATH: ${{ github.workspace }}
        PYTHONUNBUFFERED: 1
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        pytest tests/ --cov=cascade_backup_utils --cov-report=xml -v
    
    - name: Run tests on other platforms
      if: runner.os != 'Linux'
      env:
        PYTHONPATH: ${{ github.workspace }}
        PYTHONUNBUFFERED: 1
      run: |
        pytest tests/ --cov=cascade_backup_utils --cov-report=xml -v
    
    - name: Upload coverage to Codecov
      if: runner.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
